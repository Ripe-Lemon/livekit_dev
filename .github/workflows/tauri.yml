# .github/workflows/release.yml

name: 'Publish Release'

on:
  push:
    branches:
      - dev-tauri # 当代码推送到 dev-tauri 分支时触发

jobs:
  publish-tauri-desktop:
    environment: LIVEKIT
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.15.0' # 使用 Node.js 的长期支持版本

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # 注意: webkitgtk 4.0 用于 Tauri v1, 4.1 用于 Tauri v2。你可以删除不需要的版本。

      - name: install frontend dependencies
        # 核心改动：将 yarn 改为 npm
        run: npm install

      # 核心改动：更新 tauri-action 版本并简化
      # 这个 Action 会自动处理打包，它会调用你 tauri.conf.json 中定义的 beforeBuildCommand
      # 从你的日志看，beforeBuildCommand 是 "npm run build"，这正是我们想要的
      - uses: tauri-apps/tauri-action@v0.5 # 推荐使用更新的版本
        env:
          NEXT_PUBLIC_LIVEKIT_URL: ${{ vars.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
          NEXT_PUBLIC_LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Livekit v_0.0.2'
          releaseBody: '构建安卓版本'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  # --- 新增任务二：构建并签名安卓应用 ---
  publish-tauri-android:
    # needs: publish-tauri-desktop # 可选：等待桌面版构建成功后再开始，确保版本号一致性
    environment: LIVEKIT
    permissions:
      contents: write
    runs-on: ubuntu-latest # 安卓构建推荐使用 ubuntu 环境
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.15.0'

      # 为 Tauri 安卓构建设置 Java 环境 (Android SDK 需要)
      - name: setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 新增：安装 Android NDK
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          # 使用一个稳定且较新的 NDK 版本
          ndk-version: r25c

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # 添加安卓构建目标
          targets: aarch64-linux-android

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: install frontend dependencies
        run: npm install

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # 核心步骤：解码 Keystore 并设置签名环境变量
      - name: Setup Android Signing
        # 从 GitHub Secrets 中读取 Base64 编码的 Keystore 文件和密码
        # 将其解码回文件，并设置 Tauri 构建时需要的环境变量
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          echo "TAURI_PRIVATE_KEY=$(pwd)/android.keystore" >> $GITHUB_ENV
          echo "TAURI_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "TAURI_PRIVATE_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "TAURI_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
        # 确保你的仓库中已设置好以下 Secrets:
        # 1. KEYSTORE_BASE64: Keystore 文件的 Base64 字符串
        # 2. KEYSTORE_PASSWORD: Keystore 的存储库密码
        # 3. KEY_ALIAS: 密钥的别名
        # 4. KEY_PASSWORD: 密钥本身的密码 (通常与存储库密码相同)

      - uses: tauri-apps/tauri-action@v0.5
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          NEXT_PUBLIC_LIVEKIT_URL: ${{ vars.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
          NEXT_PUBLIC_LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Livekit v_0.0.2'
          releaseBody: '构建安卓版本'
          releaseDraft: true
          prerelease: false
          # 指定构建目标为 aarch64 (ARM64)，这是目前最主流的安卓架构
          args: '--target aarch64-linux-android'
