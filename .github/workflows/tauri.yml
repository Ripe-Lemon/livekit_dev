# 工作流名称：统一发布流程
name: 'Unified Publish Release'

# 环境变量，全局统一管理
env:
  CARGO_TERM_COLOR: always
  APP_NAME: 'Livekit'
  APP_VERSION: 'v_0.0.2'
  APP_DESCRIPTION: '构建安卓版本'

# 默认设置
defaults:
  run:
    shell: bash

# 工作流触发条件
on:
  push:
    branches:
      - 'dev-tauri'
      - 'releases/**'

# --- 任务定义 ---
jobs:
  # ===================================================================
  # 任务 1：预检查 (保持不变)
  # ===================================================================
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip == 'true' && !startsWith(github.ref_name, 'releases/') && github.ref_name != 'dev-tauri' }}
    steps:
      - name: 检查是否可以跳过重复的构建
        id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          cancel_others: 'true'
          paths: >-
            [
              "**/package.json",
              "**/npm-lock.json",
              "**/Cargo.toml",
              "**/Cargo.lock",
              "src/**",
              "src-tauri/**",
              ".github/workflows/**"
            ]

  # ===================================================================
  # 任务 2 (新)：创建草稿 Release (保持不变)
  # ===================================================================
  create-release:
    needs: pre-check
    if: needs.pre-check.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 创建一个草稿版本
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.APP_VERSION }} \
            --title "${{ env.APP_NAME }} ${{ env.APP_VERSION }}" \
            --notes "${{ env.APP_DESCRIPTION }}" \
            --draft \
            --prerelease=${{ github.ref_name == 'dev-tauri' }}

  # ===================================================================
  # 任务 3：构建桌面应用 (上传步骤已修正)
  # ===================================================================
  build-desktop:
    needs: create-release
    environment: LIVEKIT
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            target: ''
          - platform: 'windows-latest'
            target: ''
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 安装 Ubuntu 依赖
        if: matrix.platform == 'ubuntu-22.04'
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 安装前端依赖
        run: npm install

      - name: 构建桌面应用
        env:
          NEXT_PUBLIC_LIVEKIT_URL: ${{ vars.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
          NEXT_PUBLIC_LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
        run: npm run tauri build -- ${{ matrix.target != '' && format('--target {0}', matrix.target) || '' }}

      # --- 修正点：使用更健壮的上传逻辑 ---
      - name: 上传桌面应用产物
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 动态确定产物的基础目录
          if [[ -n "${{ matrix.target }}" ]]; then
            TARGET_DIR="src-tauri/target/${{ matrix.target }}/release"
          else
            TARGET_DIR="src-tauri/target/release"
          fi

          # 根据操作系统上传对应的文件
          echo "正在从目录 ${TARGET_DIR}/bundle 上传产物..."
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            gh release upload ${{ env.APP_VERSION }} ${TARGET_DIR}/bundle/macos/*.dmg ${TARGET_DIR}/bundle/macos/*.app.tar.gz --clobber
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            gh release upload ${{ env.APP_VERSION }} ${TARGET_DIR}/bundle/msi/*.msi ${TARGET_DIR}/bundle/nsis/*.exe --clobber
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            gh release upload ${{ env.APP_VERSION }} ${TARGET_DIR}/bundle/appimage/*.AppImage ${TARGET_DIR}/bundle/deb/*.deb --clobber
          fi

  # ===================================================================
  # 任务 4：交叉编译 Linux ARM 应用 (保持不变)
  # ===================================================================
  build-linux-arm:
    needs: create-release
    environment: LIVEKIT
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, target: aarch64-unknown-linux-gnu, base_image: 'https://dietpi.com/downloads/images/DietPi_RPi5-ARMv8-Bookworm.img.xz' }
          - { arch: armv7l, target: armv7-unknown-linux-gnueabihf, base_image: 'https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz' }
    steps:
      - uses: actions/checkout@v4
      - name: 安装解压工具
        run: sudo apt-get update && sudo apt-get install -y xz-utils
      - name: 使用 ARM 模拟器构建
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          bind_mount_repository: true
          image_additional_mb: 10240
          commands: |
            export HOME=/root
            apt-get update -y --allow-releaseinfo-change && apt-get install -y curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 nodejs npm
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            rustup target add ${{ matrix.target }}
            npm install
            export NEXT_PUBLIC_LIVEKIT_URL=${{ vars.NEXT_PUBLIC_LIVEKIT_URL }}
            export NEXT_PUBLIC_LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }}
            export NEXT_PUBLIC_LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}
            npm run tauri build -- --target ${{ matrix.target }}
      - name: 上传 ARM 构建产物
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ env.APP_VERSION }} src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb --clobber

  # ===================================================================
  # 任务 5：构建安卓应用 (保持不变)
  # ===================================================================
  build-android:
    needs: create-release
    environment: LIVEKIT
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'npm' }
      - uses: actions/setup-java@v4
        with: { distribution: 'zulu', java-version: '17', cache: 'gradle' }
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with: { ndk-version: r25c }
      - uses: dtolnay/rust-toolchain@stable
        with: { targets: aarch64-linux-android }
      - uses: Swatinem/rust-cache@v2
      - name: 配置 NDK 环境变量
        run: echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
      - name: 安装前端依赖
        run: npm install
      - name: 配置安卓签名
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          echo "TAURI_PRIVATE_KEY=$(pwd)/android.keystore" >> $GITHUB_ENV
          echo "TAURI_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "TAURI_PRIVATE_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "TAURI_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
      - name: 构建安卓应用
        run: npm run tauri android build -- --target aarch64-linux-android
      - name: 上传安卓应用产物
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ env.APP_VERSION }} src-tauri/gen/android/app/build/outputs/apk/release/*.apk --clobber

  # ===================================================================
  # 任务 6 (新)：完成并发布 Release (保持不变)
  # ===================================================================
  complete-release:
    needs: [build-desktop, build-linux-arm, build-android]
    if: success() # 仅在所有构建都成功时运行
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 正式发布版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release edit ${{ env.APP_VERSION }} --draft=false
