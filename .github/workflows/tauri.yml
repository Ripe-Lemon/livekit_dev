# .github/workflows/release.yml

name: 'Publish Release'

on:
  push:
    branches:
      - dev-tauri # 当代码推送到 dev-tauri 分支时触发

jobs:
  publish-tauri-desktop:
    environment: LIVEKIT
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.15.0' # 使用 Node.js 的长期支持版本

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # 注意: webkitgtk 4.0 用于 Tauri v1, 4.1 用于 Tauri v2。你可以删除不需要的版本。

      - name: install frontend dependencies
        # 核心改动：将 yarn 改为 npm
        run: npm install

      # 核心改动：更新 tauri-action 版本并简化
      # 这个 Action 会自动处理打包，它会调用你 tauri.conf.json 中定义的 beforeBuildCommand
      # 从你的日志看，beforeBuildCommand 是 "npm run build"，这正是我们想要的
      - uses: tauri-apps/tauri-action@v0.5 # 推荐使用更新的版本
        env:
          NEXT_PUBLIC_LIVEKIT_URL: ${{ vars.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
          NEXT_PUBLIC_LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Livekit v_0.0.2'
          releaseBody: '构建安卓版本'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  publish-tauri-linux-arm:
    needs: publish-tauri-desktop
    environment: LIVEKIT
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi5-ARMv8-Bookworm.img.xz
          - arch: armv7l
            cpu: cortex-a53
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz
    steps:
      - uses: actions/checkout@v4

      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Build app in ARM emulator
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          commands: |
            export HOME=/root
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends --no-install-suggests curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file jq
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            # 根据目标架构安装正确的 Rust target
            if [ "${{ matrix.arch }}" = "aarch64" ]; then
              rustup target add aarch64-unknown-linux-gnu
            elif [ "${{ matrix.arch }}" = "armv7l" ]; then
              rustup target add armv7-unknown-linux-gnueabihf
            fi
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs
            npm install
            npm run tauri build -- --verbose

      - name: Upload ARM assets to release
        uses: tauri-apps/tauri-action@v0.5
        env:
          NEXT_PUBLIC_LIVEKIT_URL: ${{ vars.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
          NEXT_PUBLIC_LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Livekit v_0.0.2'
          releaseBody: '构建安卓版本'
          releaseDraft: true
          prerelease: false

          args: ${{ matrix.args }}

  publish-tauri-android:
    needs: publish-tauri-desktop
    environment: LIVEKIT
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.15.0'

      - name: setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25c

      - name: Add NDK to PATH
        run: echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
        shell: bash

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android

      - name: install frontend dependencies
        run: npm install

      # ===================================================================
      # ✅ 新增的调试步骤
      # ===================================================================
      - name: 🔍 Debug Environment
        run: |
          echo "--- 1. 检查 .cargo/config.toml 文件是否存在且内容正确 ---"
          # 如果文件不存在，这里会报错，你就知道问题所在了
          cat .cargo/config.toml
          
          echo "--- 2. 检查 NDK 环境变量 ---"
          echo "ANDROID_NDK_HOME=${ANDROID_NDK_HOME}"

          echo "--- 3. 检查完整的 PATH 环境变量 ---"
          echo "$PATH"

          echo "--- 4. 尝试直接定位 aarch64-linux-android-clang 链接器 ---"
          # 如果这个命令能成功输出路径，说明 PATH 设置是有效的
          which aarch64-linux-android-clang

          echo "--- 5. 验证链接器文件是否真实存在于 NDK 目录中 ---"
          # 如果这个命令能成功列出文件信息，说明 NDK 下载和路径都是正确的
          ls -l "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-clang"
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Setup Android Signing
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          echo "TAURI_PRIVATE_KEY=$(pwd)/android.keystore" >> $GITHUB_ENV
          echo "TAURI_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "TAURI_PRIVATE_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "TAURI_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Build and release android apps
        uses: tauri-apps/tauri-action@v0
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Livekit v_0.0.2'
          releaseBody: '构建安卓版本'
          releaseDraft: true
          prerelease: false
          # 指定构建目标为 aarch64 (ARM64)，这是目前最主流的安卓架构
          args: '--target aarch64-linux-android'
